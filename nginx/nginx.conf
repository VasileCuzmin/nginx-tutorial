worker_processes auto;  # Automatically set based on available CPU cores

events {
  worker_connections 1024; 
  multi_accept on;          
  use epoll;             
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  upstream backend_cluster {
    # Define the backend servers for load balancing
    # These should be the actual backend services running on ports 3001, 3002, and 3003
    # Adjust the IP addresses and ports as necessary for your setup


    least_conn;  # Use least connections load balancing strategy
    # You can also use round-robin (default), ip_hash, or other methods as needed
    # Example backend servers (replace with your actual backend service addresses)
    server server1:3000;
    server server2:3000;
    server server3:3000;
  }

  server {
    #  listen 80;  # use 80 inside container; exposed to host as 8080 via Docker
    listen 443 ssl;  # Use SSL for secure connections
    ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt;  # Path to your SSL certificate
    ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;  # Path to your SSL certificate key
    server_name localhost;

    # Proxy requests to backend
    location / {
      proxy_pass http://backend_cluster;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve static /fruits from /usr/share/nginx/html/fruits/index.html
    location /fruits {
      root /usr/share/nginx/html;
      index index.html;
    }

    # Alias /carbs to same folder as fruits
    location /carbs {
      alias /usr/share/nginx/html/fruits/;
      index index.html;
    }

    # Serve a specific file for /vegetables
    location /vegetables {
      root /usr/share/nginx/html;
      try_files /vegetables/veggies.html /index.html =404;
    }

    # Handle /count/1, /count/123, etc.
    location ~* ^/count/[0-9]+ {
      root /usr/share/nginx/html;
      try_files /index.html =404;
    }

    # Rewrite /number/xyz â†’ /count/xyz
    rewrite ^/number/(.*)$ /count/$1 break;

    # Route for /count/anything
    location /count/ {
      root /usr/share/nginx/html;
      try_files /index.html =404;
    }

    # Redirect /crops to /fruits
    location /crops {
      return 307 /fruits;
    }

    # Exact match: /hello
    location = /hello {
      return 200 "Hello there!\n";
      add_header Content-Type text/plain;
    }

    # Redirect /home to /
    location = /home {
      rewrite ^ / permanent;
    }
  }


  server {
    listen 80;
    server_name localhost;

    return 301 https://$host$request_uri;
}
}
